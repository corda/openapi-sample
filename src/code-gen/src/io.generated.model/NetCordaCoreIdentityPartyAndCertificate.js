/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetCordaCoreIdentityParty from './NetCordaCoreIdentityParty';

/**
 * The NetCordaCoreIdentityPartyAndCertificate model module.
 * @module io.generated.model/NetCordaCoreIdentityPartyAndCertificate
 * @version 1.0.0
 */
class NetCordaCoreIdentityPartyAndCertificate {
    /**
     * Constructs a new <code>NetCordaCoreIdentityPartyAndCertificate</code>.
     * @alias module:io.generated.model/NetCordaCoreIdentityPartyAndCertificate
     * @param certPath {Blob} X509 encoded certificate PKI path
     * @param certificate {Blob} X509 encoded certificate
     * @param name {String} CordaX500Name encoded Party
     * @param owningKey {String} Base 58 Encoded Public Key
     */
    constructor(certPath, certificate, name, owningKey) { 
        
        NetCordaCoreIdentityPartyAndCertificate.initialize(this, certPath, certificate, name, owningKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certPath, certificate, name, owningKey) { 
        obj['certPath'] = certPath;
        obj['certificate'] = certificate;
        obj['name'] = name;
        obj['owningKey'] = owningKey;
    }

    /**
     * Constructs a <code>NetCordaCoreIdentityPartyAndCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:io.generated.model/NetCordaCoreIdentityPartyAndCertificate} obj Optional instance to populate.
     * @return {module:io.generated.model/NetCordaCoreIdentityPartyAndCertificate} The populated <code>NetCordaCoreIdentityPartyAndCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetCordaCoreIdentityPartyAndCertificate();

            if (data.hasOwnProperty('certPath')) {
                obj['certPath'] = ApiClient.convertToType(data['certPath'], 'Blob');
            }
            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'Blob');
            }
            if (data.hasOwnProperty('party')) {
                obj['party'] = NetCordaCoreIdentityParty.constructFromObject(data['party']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owningKey')) {
                obj['owningKey'] = ApiClient.convertToType(data['owningKey'], 'String');
            }
        }
        return obj;
    }


}

/**
 * X509 encoded certificate PKI path
 * @member {Blob} certPath
 */
NetCordaCoreIdentityPartyAndCertificate.prototype['certPath'] = undefined;

/**
 * X509 encoded certificate
 * @member {Blob} certificate
 */
NetCordaCoreIdentityPartyAndCertificate.prototype['certificate'] = undefined;

/**
 * @member {module:io.generated.model/NetCordaCoreIdentityParty} party
 */
NetCordaCoreIdentityPartyAndCertificate.prototype['party'] = undefined;

/**
 * CordaX500Name encoded Party
 * @member {String} name
 */
NetCordaCoreIdentityPartyAndCertificate.prototype['name'] = undefined;

/**
 * Base 58 Encoded Public Key
 * @member {String} owningKey
 */
NetCordaCoreIdentityPartyAndCertificate.prototype['owningKey'] = undefined;






export default NetCordaCoreIdentityPartyAndCertificate;

