{"ast":null,"code":"import React from 'react';\nexport function isMuiElement(element, muiNames) {\n  return React.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;\n} // TODO: Make it private only in v5\n\nexport function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\nexport function useForkRef(refA, refB) {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior\n   */\n  return React.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}","map":null,"metadata":{},"sourceType":"module"}