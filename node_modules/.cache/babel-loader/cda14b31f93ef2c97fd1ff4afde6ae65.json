{"ast":null,"code":"import _defineProperty from \"/Users/peterli/Desktop/Braid/openapi-sample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/peterli/Desktop/Braid/openapi-sample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/peterli/Desktop/Braid/openapi-sample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/peterli/Desktop/Braid/openapi-sample/src/components/Tasks/Tasks.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\"; // @material-ui/icons\n\nimport Edit from \"@material-ui/icons/Edit\";\nimport Close from \"@material-ui/icons/Close\";\nimport Check from \"@material-ui/icons/Check\"; // core components\n\nimport styles from \"assets/jss/material-dashboard-react/components/tasksStyle.js\";\nvar useStyles = makeStyles(styles);\nexport default function Tasks(props) {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(_toConsumableArray(props.checkedIndexes)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  var handleToggle = function handleToggle(value) {\n    var currentIndex = checked.indexOf(value);\n\n    var newChecked = _toConsumableArray(checked);\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  var tasksIndexes = props.tasksIndexes,\n      tasks = props.tasks,\n      rtlActive = props.rtlActive;\n  var tableCellClasses = classnames(classes.tableCell, _defineProperty({}, classes.tableCellRTL, rtlActive));\n  return React.createElement(Table, {\n    className: classes.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, tasksIndexes.map(function (value) {\n    return React.createElement(TableRow, {\n      key: value,\n      className: classes.tableRow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      className: tableCellClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: checked.indexOf(value) !== -1,\n      tabIndex: -1,\n      onClick: function onClick() {\n        return handleToggle(value);\n      },\n      checkedIcon: React.createElement(Check, {\n        className: classes.checkedIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }),\n      icon: React.createElement(Check, {\n        className: classes.uncheckedIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }),\n      classes: {\n        checked: classes.checked,\n        root: classes.root\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })), React.createElement(TableCell, {\n      className: tableCellClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, tasks[value]), React.createElement(TableCell, {\n      className: classes.tableActions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      id: \"tooltip-top\",\n      title: \"Edit Task\",\n      placement: \"top\",\n      classes: {\n        tooltip: classes.tooltip\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      \"aria-label\": \"Edit\",\n      className: classes.tableActionButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Edit, {\n      className: classes.tableActionButtonIcon + \" \" + classes.edit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      id: \"tooltip-top-start\",\n      title: \"Remove\",\n      placement: \"top\",\n      classes: {\n        tooltip: classes.tooltip\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      \"aria-label\": \"Close\",\n      className: classes.tableActionButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Close, {\n      className: classes.tableActionButtonIcon + \" \" + classes.close,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })))));\n  })));\n}\nTasks.propTypes = {\n  tasksIndexes: PropTypes.arrayOf(PropTypes.number),\n  tasks: PropTypes.arrayOf(PropTypes.node),\n  rtlActive: PropTypes.bool,\n  checkedIndexes: PropTypes.array\n};","map":{"version":3,"sources":["/Users/peterli/Desktop/Braid/openapi-sample/src/components/Tasks/Tasks.js"],"names":["React","PropTypes","classnames","makeStyles","Checkbox","Tooltip","IconButton","Table","TableRow","TableBody","TableCell","Edit","Close","Check","styles","useStyles","Tasks","props","classes","useState","checkedIndexes","checked","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","tasksIndexes","tasks","rtlActive","tableCellClasses","tableCell","tableCellRTL","table","map","tableRow","checkedIcon","uncheckedIcon","root","tableActions","tooltip","tableActionButton","tableActionButtonIcon","edit","close","propTypes","arrayOf","number","node","bool","array"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\n// @material-ui/icons\nimport Edit from \"@material-ui/icons/Edit\";\nimport Close from \"@material-ui/icons/Close\";\nimport Check from \"@material-ui/icons/Check\";\n// core components\nimport styles from \"assets/jss/material-dashboard-react/components/tasksStyle.js\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function Tasks(props) {\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([...props.checkedIndexes]);\n  const handleToggle = value => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n    setChecked(newChecked);\n  };\n  const { tasksIndexes, tasks, rtlActive } = props;\n  const tableCellClasses = classnames(classes.tableCell, {\n    [classes.tableCellRTL]: rtlActive\n  });\n  return (\n    <Table className={classes.table}>\n      <TableBody>\n        {tasksIndexes.map(value => (\n          <TableRow key={value} className={classes.tableRow}>\n            <TableCell className={tableCellClasses}>\n              <Checkbox\n                checked={checked.indexOf(value) !== -1}\n                tabIndex={-1}\n                onClick={() => handleToggle(value)}\n                checkedIcon={<Check className={classes.checkedIcon} />}\n                icon={<Check className={classes.uncheckedIcon} />}\n                classes={{\n                  checked: classes.checked,\n                  root: classes.root\n                }}\n              />\n            </TableCell>\n            <TableCell className={tableCellClasses}>{tasks[value]}</TableCell>\n            <TableCell className={classes.tableActions}>\n              <Tooltip\n                id=\"tooltip-top\"\n                title=\"Edit Task\"\n                placement=\"top\"\n                classes={{ tooltip: classes.tooltip }}\n              >\n                <IconButton\n                  aria-label=\"Edit\"\n                  className={classes.tableActionButton}\n                >\n                  <Edit\n                    className={\n                      classes.tableActionButtonIcon + \" \" + classes.edit\n                    }\n                  />\n                </IconButton>\n              </Tooltip>\n              <Tooltip\n                id=\"tooltip-top-start\"\n                title=\"Remove\"\n                placement=\"top\"\n                classes={{ tooltip: classes.tooltip }}\n              >\n                <IconButton\n                  aria-label=\"Close\"\n                  className={classes.tableActionButton}\n                >\n                  <Close\n                    className={\n                      classes.tableActionButtonIcon + \" \" + classes.close\n                    }\n                  />\n                </IconButton>\n              </Tooltip>\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nTasks.propTypes = {\n  tasksIndexes: PropTypes.arrayOf(PropTypes.number),\n  tasks: PropTypes.arrayOf(PropTypes.node),\n  rtlActive: PropTypes.bool,\n  checkedIndexes: PropTypes.array\n};\n"]},"metadata":{},"sourceType":"module"}