{"ast":null,"code":"import _classCallCheck from \"/Users/peterli/Desktop/Braid/openapi-sample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterli/Desktop/Braid/openapi-sample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\nimport superagent from \"superagent\";\nimport querystring from \"querystring\";\n/**\n* @module ApiClient\n* @version 1.0.0\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n*/\n\nvar ApiClient =\n/*#__PURE__*/\nfunction () {\n  function ApiClient() {\n    _classCallCheck(this, ApiClient);\n\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     * @type {String}\n     * @default http://localhost:10200/api/rest\n     */\n    this.basePath = 'http://localhost:10200/api/rest'.replace(/\\/+$/, '');\n    /**\n     * The authentication methods to be included for all API calls.\n     * @type {Array.<String>}\n     */\n\n    this.authentications = {};\n    /**\n     * The default HTTP headers to be included for all API calls.\n     * @type {Array.<String>}\n     * @default {}\n     */\n\n    this.defaultHeaders = {};\n    /**\n     * The default HTTP timeout for all API calls.\n     * @type {Number}\n     * @default 60000\n     */\n\n    this.timeout = 60000;\n    /**\n     * If set to false an additional timestamp parameter is added to all API GET calls to\n     * prevent browser caching\n     * @type {Boolean}\n     * @default true\n     */\n\n    this.cache = true;\n    /**\n     * If set to true, the client will save the cookies from each server\n     * response, and return them in the next request.\n     * @default false\n     */\n\n    this.enableCookies = false;\n    /*\n     * Used to save and return cookies in a node.js (non-browser) setting,\n     * if this.enableCookies is set to true.\n     */\n\n    if (typeof window === 'undefined') {\n      this.agent = new superagent.agent();\n    }\n    /*\n     * Allow user to override superagent agent\n     */\n\n\n    this.requestAgent = null;\n    /*\n     * Allow user to add superagent plugins\n     */\n\n    this.plugins = null;\n  }\n  /**\n  * Returns a string representation for an actual parameter.\n  * @param param The actual parameter.\n  * @returns {String} The string representation of <code>param</code>.\n  */\n\n\n  _createClass(ApiClient, [{\n    key: \"paramToString\",\n    value: function paramToString(param) {\n      if (param == undefined || param == null) {\n        return '';\n      }\n\n      if (param instanceof Date) {\n        return param.toJSON();\n      }\n\n      return param.toString();\n    }\n    /**\n     * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n     * NOTE: query parameters are not handled here.\n     * @param {String} path The path to append to the base URL.\n     * @param {Object} pathParams The parameter values to append.\n     * @param {String} apiBasePath Base path defined in the path, operation level to override the default one\n     * @returns {String} The encoded path with parameter values substituted.\n     */\n\n  }, {\n    key: \"buildUrl\",\n    value: function buildUrl(path, pathParams, apiBasePath) {\n      var _this = this;\n\n      if (!path.match(/^\\//)) {\n        path = '/' + path;\n      }\n\n      var url = this.basePath + path; // use API (operation, path) base path if defined\n\n      if (apiBasePath !== null && apiBasePath !== undefined) {\n        url = apiBasePath + path;\n      }\n\n      url = url.replace(/\\{([\\w-]+)\\}/g, function (fullMatch, key) {\n        var value;\n\n        if (pathParams.hasOwnProperty(key)) {\n          value = _this.paramToString(pathParams[key]);\n        } else {\n          value = fullMatch;\n        }\n\n        return encodeURIComponent(value);\n      });\n      return url;\n    }\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n\n  }, {\n    key: \"isJsonMime\",\n    value: function isJsonMime(contentType) {\n      return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n\n  }, {\n    key: \"jsonPreferredMime\",\n    value: function jsonPreferredMime(contentTypes) {\n      for (var i = 0; i < contentTypes.length; i++) {\n        if (this.isJsonMime(contentTypes[i])) {\n          return contentTypes[i];\n        }\n      }\n\n      return contentTypes[0];\n    }\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n\n  }, {\n    key: \"isFileParam\",\n    value: function isFileParam(param) {\n      // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n      if (typeof require === 'function') {\n        var fs;\n\n        try {\n          fs = require('fs');\n        } catch (err) {}\n\n        if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n          return true;\n        }\n      } // Buffer in Node.js\n\n\n      if (typeof Buffer === 'function' && param instanceof Buffer) {\n        return true;\n      } // Blob in browser\n\n\n      if (typeof Blob === 'function' && param instanceof Blob) {\n        return true;\n      } // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n\n\n      if (typeof File === 'function' && param instanceof File) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n\n  }, {\n    key: \"normalizeParams\",\n    value: function normalizeParams(params) {\n      var newParams = {};\n\n      for (var key in params) {\n        if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n          var value = params[key];\n\n          if (this.isFileParam(value) || Array.isArray(value)) {\n            newParams[key] = value;\n          } else {\n            newParams[key] = this.paramToString(value);\n          }\n        }\n      }\n\n      return newParams;\n    }\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n\n  }, {\n    key: \"buildCollectionParam\",\n    value: function buildCollectionParam(param, collectionFormat) {\n      if (param == null) {\n        return null;\n      }\n\n      switch (collectionFormat) {\n        case 'csv':\n          return param.map(this.paramToString).join(',');\n\n        case 'ssv':\n          return param.map(this.paramToString).join(' ');\n\n        case 'tsv':\n          return param.map(this.paramToString).join('\\t');\n\n        case 'pipes':\n          return param.map(this.paramToString).join('|');\n\n        case 'multi':\n          //return the array directly as SuperAgent will handle it as expected\n          return param.map(this.paramToString);\n\n        default:\n          throw new Error('Unknown collection format: ' + collectionFormat);\n      }\n    }\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Array.<String>} authNames An array of authentication method names.\n    */\n\n  }, {\n    key: \"applyAuthToRequest\",\n    value: function applyAuthToRequest(request, authNames) {\n      var _this2 = this;\n\n      authNames.forEach(function (authName) {\n        var auth = _this2.authentications[authName];\n\n        switch (auth.type) {\n          case 'basic':\n            if (auth.username || auth.password) {\n              request.auth(auth.username || '', auth.password || '');\n            }\n\n            break;\n\n          case 'bearer':\n            if (auth.accessToken) {\n              request.set({\n                'Authorization': 'Bearer ' + auth.accessToken\n              });\n            }\n\n            break;\n\n          case 'apiKey':\n            if (auth.apiKey) {\n              var data = {};\n\n              if (auth.apiKeyPrefix) {\n                data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n              } else {\n                data[auth.name] = auth.apiKey;\n              }\n\n              if (auth['in'] === 'header') {\n                request.set(data);\n              } else {\n                request.query(data);\n              }\n            }\n\n            break;\n\n          case 'oauth2':\n            if (auth.accessToken) {\n              request.set({\n                'Authorization': 'Bearer ' + auth.accessToken\n              });\n            }\n\n            break;\n\n          default:\n            throw new Error('Unknown authentication type: ' + auth.type);\n        }\n      });\n    }\n    /**\n     * Deserializes an HTTP response body into a value of the specified type.\n     * @param {Object} response A SuperAgent response object.\n     * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n     * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n     * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n     * all properties on <code>data<code> will be converted to this type.\n     * @returns A value of the specified type.\n     */\n\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(response, returnType) {\n      if (response == null || returnType == null || response.status == 204) {\n        return null;\n      } // Rely on SuperAgent for parsing response body.\n      // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n\n\n      var data = response.body;\n\n      if (data == null || typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length) {\n        // SuperAgent does not always produce a body; use the unparsed response as a fallback\n        data = response.text;\n      }\n\n      return ApiClient.convertToType(data, returnType);\n    }\n    /**\n     * Callback function to receive the result of the operation.\n     * @callback module:ApiClient~callApiCallback\n     * @param {String} error Error message, if any.\n     * @param data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Invokes the REST service using the supplied settings and parameters.\n     * @param {String} path The base URL to invoke.\n     * @param {String} httpMethod The HTTP method to use.\n     * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n     * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n     * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n     * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n     * @param {Object} bodyParam The value to pass as the request body.\n     * @param {Array.<String>} authNames An array of authentication type names.\n     * @param {Array.<String>} contentTypes An array of request MIME types.\n     * @param {Array.<String>} accepts An array of acceptable response MIME types.\n     * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n     * constructor for a complex type.\n     * @param {String} apiBasePath base path defined in the operation/path level to override the default one \n     * @param {module:ApiClient~callApiCallback} callback The callback function.\n     * @returns {Object} The SuperAgent request object.\n     */\n\n  }, {\n    key: \"callApi\",\n    value: function callApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType, apiBasePath, callback) {\n      var _this3 = this;\n\n      var url = this.buildUrl(path, pathParams, apiBasePath);\n      var request = superagent(httpMethod, url);\n\n      if (this.plugins !== null) {\n        for (var index in this.plugins) {\n          if (this.plugins.hasOwnProperty(index)) {\n            request.use(this.plugins[index]);\n          }\n        }\n      } // apply authentications\n\n\n      this.applyAuthToRequest(request, authNames); // set query parameters\n\n      if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n        queryParams['_'] = new Date().getTime();\n      }\n\n      request.query(this.normalizeParams(queryParams)); // set header parameters\n\n      request.set(this.defaultHeaders).set(this.normalizeParams(headerParams)); // set requestAgent if it is set by user\n\n      if (this.requestAgent) {\n        request.agent(this.requestAgent);\n      } // set request timeout\n\n\n      request.timeout(this.timeout);\n      var contentType = this.jsonPreferredMime(contentTypes);\n\n      if (contentType) {\n        // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n        if (contentType != 'multipart/form-data') {\n          request.type(contentType);\n        }\n      } else if (!request.header['Content-Type']) {\n        request.type('application/json');\n      }\n\n      if (contentType === 'application/x-www-form-urlencoded') {\n        request.send(querystring.stringify(this.normalizeParams(formParams)));\n      } else if (contentType == 'multipart/form-data') {\n        var _formParams = this.normalizeParams(formParams);\n\n        for (var key in _formParams) {\n          if (_formParams.hasOwnProperty(key)) {\n            if (this.isFileParam(_formParams[key])) {\n              // file field\n              request.attach(key, _formParams[key]);\n            } else {\n              request.field(key, _formParams[key]);\n            }\n          }\n        }\n      } else if (bodyParam !== null && bodyParam !== undefined) {\n        request.send(bodyParam);\n      }\n\n      var accept = this.jsonPreferredMime(accepts);\n\n      if (accept) {\n        request.accept(accept);\n      }\n\n      if (returnType === 'Blob') {\n        request.responseType('blob');\n      } else if (returnType === 'String') {\n        request.responseType('string');\n      } // Attach previously saved cookies, if enabled\n\n\n      if (this.enableCookies) {\n        if (typeof window === 'undefined') {\n          this.agent._attachCookies(request);\n        } else {\n          request.withCredentials();\n        }\n      }\n\n      request.end(function (error, response) {\n        if (callback) {\n          var data = null;\n\n          if (!error) {\n            try {\n              data = _this3.deserialize(response, returnType);\n\n              if (_this3.enableCookies && typeof window === 'undefined') {\n                _this3.agent._saveCookies(response);\n              }\n            } catch (err) {\n              error = err;\n            }\n          }\n\n          callback(error, data, response);\n        }\n      });\n      return request;\n    }\n    /**\n    * Parses an ISO-8601 string representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n\n  }, {\n    key: \"hostSettings\",\n\n    /**\n      * Gets an array of host settings\n      * @returns An array of host settings\n      */\n    value: function hostSettings() {\n      return [{\n        'url': \"http://localhost:10200/api/rest\",\n        'description': \"No description provided\"\n      }];\n    }\n  }, {\n    key: \"getBasePathFromSettings\",\n    value: function getBasePathFromSettings(index) {\n      var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var servers = this.hostSettings(); // check array index out of bound\n\n      if (index < 0 || index >= servers.length) {\n        throw new Error(\"Invalid index \" + index + \" when selecting the host settings. Must be less than \" + servers.length);\n      }\n\n      var server = servers[index];\n      var url = server['url']; // go through variable and assign a value\n\n      for (var variable_name in server['variables']) {\n        if (variable_name in variables) {\n          var variable = server['variables'][variable_name];\n\n          if (!('enum_values' in variable) || variable['enum_values'].includes(variables[variable_name])) {\n            url = url.replace(\"{\" + variable_name + \"}\", variables[variable_name]);\n          } else {\n            throw new Error(\"The variable `\" + variable_name + \"` in the host URL has invalid value \" + variables[variable_name] + \". Must be \" + server['variables'][variable_name]['enum_values'] + \".\");\n          }\n        } else {\n          // use default value\n          url = url.replace(\"{\" + variable_name + \"}\", server['variables'][variable_name]['default_value']);\n        }\n      }\n\n      return url;\n    }\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n\n  }], [{\n    key: \"parseDate\",\n    value: function parseDate(str) {\n      return new Date(str);\n    }\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n\n  }, {\n    key: \"convertToType\",\n    value: function convertToType(data, type) {\n      if (data === null || data === undefined) return data;\n\n      switch (type) {\n        case 'Boolean':\n          return Boolean(data);\n\n        case 'Integer':\n          return parseInt(data, 10);\n\n        case 'Number':\n          return parseFloat(data);\n\n        case 'String':\n          return String(data);\n\n        case 'Date':\n          return ApiClient.parseDate(String(data));\n\n        case 'Blob':\n          return data;\n\n        default:\n          if (type === Object) {\n            // generic object, return directly\n            return data;\n          } else if (typeof type.constructFromObject === 'function') {\n            // for model type like User and enum class\n            return type.constructFromObject(data);\n          } else if (Array.isArray(type)) {\n            // for array type like: ['String']\n            var itemType = type[0];\n            return data.map(function (item) {\n              return ApiClient.convertToType(item, itemType);\n            });\n          } else if (typeof type === 'object') {\n            // for plain object type like: {'String': 'Integer'}\n            var keyType, valueType;\n\n            for (var k in type) {\n              if (type.hasOwnProperty(k)) {\n                keyType = k;\n                valueType = type[k];\n                break;\n              }\n            }\n\n            var result = {};\n\n            for (var k in data) {\n              if (data.hasOwnProperty(k)) {\n                var key = ApiClient.convertToType(k, keyType);\n                var value = ApiClient.convertToType(data[k], valueType);\n                result[key] = value;\n              }\n            }\n\n            return result;\n          } else {\n            // for unknown type, return the data directly\n            return data;\n          }\n\n      }\n    }\n  }, {\n    key: \"constructFromObject\",\n    value: function constructFromObject(data, obj, itemType) {\n      if (Array.isArray(data)) {\n        for (var i = 0; i < data.length; i++) {\n          if (data.hasOwnProperty(i)) obj[i] = ApiClient.convertToType(data[i], itemType);\n        }\n      } else {\n        for (var k in data) {\n          if (data.hasOwnProperty(k)) obj[k] = ApiClient.convertToType(data[k], itemType);\n        }\n      }\n    }\n  }]);\n\n  return ApiClient;\n}();\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\n\n\nApiClient.CollectionFormatEnum = {\n  /**\n   * Comma-separated values. Value: <code>csv</code>\n   * @const\n   */\n  CSV: ',',\n\n  /**\n   * Space-separated values. Value: <code>ssv</code>\n   * @const\n   */\n  SSV: ' ',\n\n  /**\n   * Tab-separated values. Value: <code>tsv</code>\n   * @const\n   */\n  TSV: '\\t',\n\n  /**\n   * Pipe(|)-separated values. Value: <code>pipes</code>\n   * @const\n   */\n  PIPES: '|',\n\n  /**\n   * Native array. Value: <code>multi</code>\n   * @const\n   */\n  MULTI: 'multi'\n};\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\n\nApiClient.instance = new ApiClient();\nexport default ApiClient;","map":{"version":3,"sources":["/Users/peterli/Desktop/Braid/openapi-sample/src/code-gen/src/ApiClient.js"],"names":["superagent","querystring","ApiClient","basePath","replace","authentications","defaultHeaders","timeout","cache","enableCookies","window","agent","requestAgent","plugins","param","undefined","Date","toJSON","toString","path","pathParams","apiBasePath","match","url","fullMatch","key","value","hasOwnProperty","paramToString","encodeURIComponent","contentType","Boolean","contentTypes","i","length","isJsonMime","require","fs","err","ReadStream","Buffer","Blob","File","params","newParams","isFileParam","Array","isArray","collectionFormat","map","join","Error","request","authNames","forEach","authName","auth","type","username","password","accessToken","set","apiKey","data","apiKeyPrefix","name","query","response","returnType","status","body","Object","keys","text","convertToType","httpMethod","queryParams","headerParams","formParams","bodyParam","accepts","callback","buildUrl","index","use","applyAuthToRequest","toUpperCase","getTime","normalizeParams","jsonPreferredMime","header","send","stringify","_formParams","attach","field","accept","responseType","_attachCookies","withCredentials","end","error","deserialize","_saveCookies","variables","servers","hostSettings","server","variable_name","variable","includes","str","parseInt","parseFloat","String","parseDate","constructFromObject","itemType","item","keyType","valueType","k","result","obj","CollectionFormatEnum","CSV","SSV","TSV","PIPES","MULTI","instance"],"mappings":"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","sourcesContent":["/**\n * \n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport superagent from \"superagent\";\nimport querystring from \"querystring\";\n\n/**\n* @module ApiClient\n* @version 1.0.0\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n*/\nclass ApiClient {\n    constructor() {\n        /**\n         * The base URL against which to resolve every API call's (relative) path.\n         * @type {String}\n         * @default http://localhost:10200/api/rest\n         */\n        this.basePath = 'http://localhost:10200/api/rest'.replace(/\\/+$/, '');\n\n        /**\n         * The authentication methods to be included for all API calls.\n         * @type {Array.<String>}\n         */\n        this.authentications = {\n        }\n\n        /**\n         * The default HTTP headers to be included for all API calls.\n         * @type {Array.<String>}\n         * @default {}\n         */\n        this.defaultHeaders = {};\n\n        /**\n         * The default HTTP timeout for all API calls.\n         * @type {Number}\n         * @default 60000\n         */\n        this.timeout = 60000;\n\n        /**\n         * If set to false an additional timestamp parameter is added to all API GET calls to\n         * prevent browser caching\n         * @type {Boolean}\n         * @default true\n         */\n        this.cache = true;\n\n        /**\n         * If set to true, the client will save the cookies from each server\n         * response, and return them in the next request.\n         * @default false\n         */\n        this.enableCookies = false;\n\n        /*\n         * Used to save and return cookies in a node.js (non-browser) setting,\n         * if this.enableCookies is set to true.\n         */\n        if (typeof window === 'undefined') {\n          this.agent = new superagent.agent();\n        }\n\n        /*\n         * Allow user to override superagent agent\n         */\n         this.requestAgent = null;\n\n        /*\n         * Allow user to add superagent plugins\n         */\n        this.plugins = null;\n\n    }\n\n    /**\n    * Returns a string representation for an actual parameter.\n    * @param param The actual parameter.\n    * @returns {String} The string representation of <code>param</code>.\n    */\n    paramToString(param) {\n        if (param == undefined || param == null) {\n            return '';\n        }\n        if (param instanceof Date) {\n            return param.toJSON();\n        }\n\n        return param.toString();\n    }\n\n   /**\n    * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n    * NOTE: query parameters are not handled here.\n    * @param {String} path The path to append to the base URL.\n    * @param {Object} pathParams The parameter values to append.\n    * @param {String} apiBasePath Base path defined in the path, operation level to override the default one\n    * @returns {String} The encoded path with parameter values substituted.\n    */\n    buildUrl(path, pathParams, apiBasePath) {\n        if (!path.match(/^\\//)) {\n            path = '/' + path;\n        }\n\n        var url = this.basePath + path;\n\n        // use API (operation, path) base path if defined\n        if (apiBasePath !== null && apiBasePath !== undefined) {\n            url = apiBasePath + path;\n        }\n\n        url = url.replace(/\\{([\\w-]+)\\}/g, (fullMatch, key) => {\n            var value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = this.paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n\n            return encodeURIComponent(value);\n        });\n\n        return url;\n    }\n\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n    isJsonMime(contentType) {\n        return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n    jsonPreferredMime(contentTypes) {\n        for (var i = 0; i < contentTypes.length; i++) {\n            if (this.isJsonMime(contentTypes[i])) {\n                return contentTypes[i];\n            }\n        }\n\n        return contentTypes[0];\n    }\n\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n    isFileParam(param) {\n        // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n        if (typeof require === 'function') {\n            let fs;\n            try {\n                fs = require('fs');\n            } catch (err) {}\n            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n                return true;\n            }\n        }\n\n        // Buffer in Node.js\n        if (typeof Buffer === 'function' && param instanceof Buffer) {\n            return true;\n        }\n\n        // Blob in browser\n        if (typeof Blob === 'function' && param instanceof Blob) {\n            return true;\n        }\n\n        // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n        if (typeof File === 'function' && param instanceof File) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n    normalizeParams(params) {\n        var newParams = {};\n        for (var key in params) {\n            if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n                var value = params[key];\n                if (this.isFileParam(value) || Array.isArray(value)) {\n                    newParams[key] = value;\n                } else {\n                    newParams[key] = this.paramToString(value);\n                }\n            }\n        }\n\n        return newParams;\n    }\n\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n    buildCollectionParam(param, collectionFormat) {\n        if (param == null) {\n            return null;\n        }\n        switch (collectionFormat) {\n            case 'csv':\n                return param.map(this.paramToString).join(',');\n            case 'ssv':\n                return param.map(this.paramToString).join(' ');\n            case 'tsv':\n                return param.map(this.paramToString).join('\\t');\n            case 'pipes':\n                return param.map(this.paramToString).join('|');\n            case 'multi':\n                //return the array directly as SuperAgent will handle it as expected\n                return param.map(this.paramToString);\n            default:\n                throw new Error('Unknown collection format: ' + collectionFormat);\n        }\n    }\n\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Array.<String>} authNames An array of authentication method names.\n    */\n    applyAuthToRequest(request, authNames) {\n        authNames.forEach((authName) => {\n            var auth = this.authentications[authName];\n            switch (auth.type) {\n                case 'basic':\n                    if (auth.username || auth.password) {\n                        request.auth(auth.username || '', auth.password || '');\n                    }\n\n                    break;\n                case 'bearer':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                case 'apiKey':\n                    if (auth.apiKey) {\n                        var data = {};\n                        if (auth.apiKeyPrefix) {\n                            data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n                        } else {\n                            data[auth.name] = auth.apiKey;\n                        }\n\n                        if (auth['in'] === 'header') {\n                            request.set(data);\n                        } else {\n                            request.query(data);\n                        }\n                    }\n\n                    break;\n                case 'oauth2':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                default:\n                    throw new Error('Unknown authentication type: ' + auth.type);\n            }\n        });\n    }\n\n   /**\n    * Deserializes an HTTP response body into a value of the specified type.\n    * @param {Object} response A SuperAgent response object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns A value of the specified type.\n    */\n    deserialize(response, returnType) {\n        if (response == null || returnType == null || response.status == 204) {\n            return null;\n        }\n\n        // Rely on SuperAgent for parsing response body.\n        // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n        var data = response.body;\n        if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n            // SuperAgent does not always produce a body; use the unparsed response as a fallback\n            data = response.text;\n        }\n\n        return ApiClient.convertToType(data, returnType);\n    }\n\n   /**\n    * Callback function to receive the result of the operation.\n    * @callback module:ApiClient~callApiCallback\n    * @param {String} error Error message, if any.\n    * @param data The data returned by the service call.\n    * @param {String} response The complete HTTP response.\n    */\n\n   /**\n    * Invokes the REST service using the supplied settings and parameters.\n    * @param {String} path The base URL to invoke.\n    * @param {String} httpMethod The HTTP method to use.\n    * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n    * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n    * @param {Object} bodyParam The value to pass as the request body.\n    * @param {Array.<String>} authNames An array of authentication type names.\n    * @param {Array.<String>} contentTypes An array of request MIME types.\n    * @param {Array.<String>} accepts An array of acceptable response MIME types.\n    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n    * constructor for a complex type.\n    * @param {String} apiBasePath base path defined in the operation/path level to override the default one \n    * @param {module:ApiClient~callApiCallback} callback The callback function.\n    * @returns {Object} The SuperAgent request object.\n    */\n    callApi(path, httpMethod, pathParams,\n        queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n        returnType, apiBasePath, callback) {\n\n        var url = this.buildUrl(path, pathParams, apiBasePath);\n        var request = superagent(httpMethod, url);\n\n        if (this.plugins !== null) {\n            for (var index in this.plugins) {\n                if (this.plugins.hasOwnProperty(index)) {\n                    request.use(this.plugins[index])\n                }\n            }\n        }\n\n        // apply authentications\n        this.applyAuthToRequest(request, authNames);\n\n        // set query parameters\n        if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n            queryParams['_'] = new Date().getTime();\n        }\n\n        request.query(this.normalizeParams(queryParams));\n\n        // set header parameters\n        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n        // set requestAgent if it is set by user\n        if (this.requestAgent) {\n          request.agent(this.requestAgent);\n        }\n\n        // set request timeout\n        request.timeout(this.timeout);\n\n        var contentType = this.jsonPreferredMime(contentTypes);\n        if (contentType) {\n            // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n            if(contentType != 'multipart/form-data') {\n                request.type(contentType);\n            }\n        } else if (!request.header['Content-Type']) {\n            request.type('application/json');\n        }\n\n        if (contentType === 'application/x-www-form-urlencoded') {\n            request.send(querystring.stringify(this.normalizeParams(formParams)));\n        } else if (contentType == 'multipart/form-data') {\n            var _formParams = this.normalizeParams(formParams);\n            for (var key in _formParams) {\n                if (_formParams.hasOwnProperty(key)) {\n                    if (this.isFileParam(_formParams[key])) {\n                        // file field\n                        request.attach(key, _formParams[key]);\n                    } else {\n                        request.field(key, _formParams[key]);\n                    }\n                }\n            }\n        } else if (bodyParam !== null && bodyParam !== undefined) {\n            request.send(bodyParam);\n        }\n\n        var accept = this.jsonPreferredMime(accepts);\n        if (accept) {\n            request.accept(accept);\n        }\n\n        if (returnType === 'Blob') {\n          request.responseType('blob');\n        } else if (returnType === 'String') {\n          request.responseType('string');\n        }\n\n        // Attach previously saved cookies, if enabled\n        if (this.enableCookies){\n            if (typeof window === 'undefined') {\n                this.agent._attachCookies(request);\n            }\n            else {\n                request.withCredentials();\n            }\n        }\n\n        request.end((error, response) => {\n            if (callback) {\n                var data = null;\n                if (!error) {\n                    try {\n                        data = this.deserialize(response, returnType);\n                        if (this.enableCookies && typeof window === 'undefined'){\n                            this.agent._saveCookies(response);\n                        }\n                    } catch (err) {\n                        error = err;\n                    }\n                }\n\n                callback(error, data, response);\n            }\n        });\n\n        return request;\n    }\n\n    /**\n    * Parses an ISO-8601 string representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n    static parseDate(str) {\n        return new Date(str);\n    }\n\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n    static convertToType(data, type) {\n        if (data === null || data === undefined)\n            return data\n\n        switch (type) {\n            case 'Boolean':\n                return Boolean(data);\n            case 'Integer':\n                return parseInt(data, 10);\n            case 'Number':\n                return parseFloat(data);\n            case 'String':\n                return String(data);\n            case 'Date':\n                return ApiClient.parseDate(String(data));\n            case 'Blob':\n                return data;\n            default:\n                if (type === Object) {\n                    // generic object, return directly\n                    return data;\n                } else if (typeof type.constructFromObject === 'function') {\n                    // for model type like User and enum class\n                    return type.constructFromObject(data);\n                } else if (Array.isArray(type)) {\n                    // for array type like: ['String']\n                    var itemType = type[0];\n\n                    return data.map((item) => {\n                        return ApiClient.convertToType(item, itemType);\n                    });\n                } else if (typeof type === 'object') {\n                    // for plain object type like: {'String': 'Integer'}\n                    var keyType, valueType;\n                    for (var k in type) {\n                        if (type.hasOwnProperty(k)) {\n                            keyType = k;\n                            valueType = type[k];\n                            break;\n                        }\n                    }\n\n                    var result = {};\n                    for (var k in data) {\n                        if (data.hasOwnProperty(k)) {\n                            var key = ApiClient.convertToType(k, keyType);\n                            var value = ApiClient.convertToType(data[k], valueType);\n                            result[key] = value;\n                        }\n                    }\n\n                    return result;\n                } else {\n                    // for unknown type, return the data directly\n                    return data;\n                }\n        }\n    }\n\n  /**\n    * Gets an array of host settings\n    * @returns An array of host settings\n    */\n    hostSettings() {\n        return [\n            {\n              'url': \"http://localhost:10200/api/rest\",\n              'description': \"No description provided\",\n            }\n      ];\n    }\n\n    getBasePathFromSettings(index, variables={}) {\n        var servers = this.hostSettings();\n\n        // check array index out of bound\n        if (index < 0 || index >= servers.length) {\n            throw new Error(\"Invalid index \" + index + \" when selecting the host settings. Must be less than \" + servers.length);\n        }\n\n        var server = servers[index];\n        var url = server['url'];\n\n        // go through variable and assign a value\n        for (var variable_name in server['variables']) {\n            if (variable_name in variables) {\n                let variable = server['variables'][variable_name];\n                if ( !('enum_values' in variable) || variable['enum_values'].includes(variables[variable_name]) ) {\n                    url = url.replace(\"{\" + variable_name + \"}\", variables[variable_name]);\n                } else {\n                    throw new Error(\"The variable `\" + variable_name + \"` in the host URL has invalid value \" + variables[variable_name] + \". Must be \" + server['variables'][variable_name]['enum_values'] + \".\");\n                }\n            } else {\n                // use default value\n                url = url.replace(\"{\" + variable_name + \"}\", server['variables'][variable_name]['default_value'])\n            }\n        }\n        return url;\n    }\n\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n    static constructFromObject(data, obj, itemType) {\n        if (Array.isArray(data)) {\n            for (var i = 0; i < data.length; i++) {\n                if (data.hasOwnProperty(i))\n                    obj[i] = ApiClient.convertToType(data[i], itemType);\n            }\n        } else {\n            for (var k in data) {\n                if (data.hasOwnProperty(k))\n                    obj[k] = ApiClient.convertToType(data[k], itemType);\n            }\n        }\n    };\n}\n\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\nApiClient.CollectionFormatEnum = {\n    /**\n     * Comma-separated values. Value: <code>csv</code>\n     * @const\n     */\n    CSV: ',',\n\n    /**\n     * Space-separated values. Value: <code>ssv</code>\n     * @const\n     */\n    SSV: ' ',\n\n    /**\n     * Tab-separated values. Value: <code>tsv</code>\n     * @const\n     */\n    TSV: '\\t',\n\n    /**\n     * Pipe(|)-separated values. Value: <code>pipes</code>\n     * @const\n     */\n    PIPES: '|',\n\n    /**\n     * Native array. Value: <code>multi</code>\n     * @const\n     */\n    MULTI: 'multi'\n};\n\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\nApiClient.instance = new ApiClient();\nexport default ApiClient;\n"]},"metadata":{},"sourceType":"module"}